/*
  SAMR3 - Variant XPRO
    Created on: 01.01.2020
    Author: Georgi Angelov

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA   
 */

#include <Arduino.h>
#include "WVariant.h"

#define NOT_CONNECTED NOT_A_PORT, 128, 128, 128, 128, 128, 128, 128
#define NO_OTHER      TIMER_NONE, ADC_NONE, EINT_NONE, GCLK_CCL_NONE


const PinDescription g_APinDescription[] = {
  {PORTA,  7, PIO_MULTI, (PER_ATTR_OUTPUT_TYPE_STD), (PIN_ATTR_DIGITAL | PIN_ATTR_EXTINT | PIN_ATTR_ADC), TIMER_NONE, ADC_7, EINT_7, GCLK_CCL_NONE},
  {PORTA,  8, PIO_MULTI, (PER_ATTR_OUTPUT_TYPE_STD), (PIN_ATTR_DIGITAL | PIN_ATTR_EXTINT), TIMER_NONE, ADC_NONE, EINT_0,  GCLK_CCL_NONE},
  {PORTA, 27, PIO_MULTI, (PER_ATTR_OUTPUT_TYPE_STD), (PIN_ATTR_DIGITAL | PIN_ATTR_EXTINT), TIMER_NONE, ADC_NONE, EINT_15, GCLK_CCL_NONE},
  {PORTA, 16, PIO_MULTI, (PER_ATTR_OUTPUT_TYPE_STD), (PIN_ATTR_DIGITAL | PIN_ATTR_EXTINT), TIMER_NONE, ADC_NONE, EINT_0,  GCLK_CCL_NONE},
  {PORTA, 17, PIO_MULTI, (PER_ATTR_OUTPUT_TYPE_STD), (PIN_ATTR_DIGITAL | PIN_ATTR_EXTINT), TIMER_NONE, ADC_NONE, EINT_1,  GCLK_CCL_NONE},
  {PORTA, 18, PIO_MULTI, (PER_ATTR_OUTPUT_TYPE_STD), (PIN_ATTR_DIGITAL | PIN_ATTR_EXTINT), TIMER_NONE, ADC_NONE, EINT_2,  GCLK_CCL_NONE},
  {PORTA, 19, PIO_MULTI, (PER_ATTR_OUTPUT_TYPE_STD), (PIN_ATTR_DIGITAL | PIN_ATTR_EXTINT), TIMER_NONE, ADC_NONE, EINT_3,  GCLK_CCL_NONE},
  {PORTA, 15, PIO_MULTI, (PER_ATTR_OUTPUT_TYPE_STD), (PIN_ATTR_DIGITAL | PIN_ATTR_EXTINT), TIMER_NONE, ADC_NONE, EINT_7,  GCLK_CCL_NONE},
  {PORTA, 14, PIO_MULTI, (PER_ATTR_OUTPUT_TYPE_STD), (PIN_ATTR_DIGITAL | PIN_ATTR_EXTINT), TIMER_NONE, ADC_NONE, EINT_6,  GCLK_CCL_NONE},
  {PORTB, 22, PIO_MULTI, (PER_ATTR_OUTPUT_TYPE_STD), (PIN_ATTR_DIGITAL | PIN_ATTR_EXTINT), TIMER_NONE, ADC_NONE, EINT_6,  GCLK_CCL_NONE},
  {PORTA, 23, PIO_MULTI, (PER_ATTR_OUTPUT_TYPE_STD), (PIN_ATTR_DIGITAL | PIN_ATTR_EXTINT), TIMER_NONE, ADC_NONE, EINT_7,  GCLK_CCL_NONE},
  {PORTB, 23, PIO_MULTI, (PER_ATTR_OUTPUT_TYPE_STD), (PIN_ATTR_DIGITAL | PIN_ATTR_EXTINT), TIMER_NONE, ADC_NONE, EINT_7,  GCLK_CCL_NONE},  
  {PORTB, 02, PIO_MULTI, (PER_ATTR_OUTPUT_TYPE_STD), (PIN_ATTR_DIGITAL | PIN_ATTR_EXTINT), TIMER_NONE, ADC_NONE, EINT_2,  GCLK_CCL_NONE},
  {PORTA, 22, PIO_MULTI, (PER_ATTR_OUTPUT_TYPE_STD), (PIN_ATTR_DIGITAL | PIN_ATTR_EXTINT), TIMER_NONE, ADC_NONE, EINT_6,  GCLK_CCL_NONE},
  {PORTA, 25, PIO_MULTI, (PER_ATTR_OUTPUT_TYPE_STD), (PIN_ATTR_DIGITAL | PIN_ATTR_EXTINT), TIMER_NONE, ADC_NONE, EINT_13, GCLK_CCL_NONE},  
  {PORTA, 24, PIO_MULTI, (PER_ATTR_OUTPUT_TYPE_STD), (PIN_ATTR_DIGITAL | PIN_ATTR_EXTINT), TIMER_NONE, ADC_NONE, EINT_12, GCLK_CCL_NONE},
  {PORTA, 28, PIO_MULTI, (PER_ATTR_OUTPUT_TYPE_STD), (PIN_ATTR_DIGITAL | PIN_ATTR_EXTINT), TIMER_NONE, ADC_NONE, EINT_8,  GCLK_CCL_NONE},
  {PORTA,  5, PIO_MULTI, (PER_ATTR_OUTPUT_TYPE_STD), (PIN_ATTR_DIGITAL | PIN_ATTR_EXTINT), TIMER_NONE, ADC_NONE, EINT_5,  GCLK_CCL_NONE},
  {PORTA,  4, PIO_MULTI, (PER_ATTR_OUTPUT_TYPE_STD), (PIN_ATTR_DIGITAL | PIN_ATTR_EXTINT), TIMER_NONE, ADC_NONE, EINT_4,  GCLK_CCL_NONE},
  {PORTB,  3, PIO_MULTI, (PER_ATTR_OUTPUT_TYPE_STD), (PIN_ATTR_DIGITAL | PIN_ATTR_EXTINT), TIMER_NONE, ADC_NONE, EINT_3,  GCLK_CCL_NONE},
  {PORTA,  6, PIO_MULTI, (PER_ATTR_OUTPUT_TYPE_STD), (PIN_ATTR_DIGITAL | PIN_ATTR_EXTINT | PIN_ATTR_ADC), TIMER_NONE, ADC_6, EINT_6, GCLK_CCL_NONE},

  {PORTA,  7, PIO_MULTI, (PER_ATTR_OUTPUT_TYPE_STD), (PIN_ATTR_DIGITAL | PIN_ATTR_EXTINT | PIN_ATTR_ADC), TIMER_NONE, ADC_7, EINT_7, GCLK_CCL_NONE},
  {PORTA,  6, PIO_MULTI, (PER_ATTR_OUTPUT_TYPE_STD), (PIN_ATTR_DIGITAL | PIN_ATTR_EXTINT | PIN_ATTR_ADC), TIMER_NONE, ADC_6, EINT_6, GCLK_CCL_NONE},

  //i2c
  {PORTA, 16, PIO_MULTI, (PER_ATTR_SERCOM_STD), (PIN_ATTR_SERCOM), NO_OTHER}, //SS1-0, SA3-0
  {PORTA, 17, PIO_MULTI, (PER_ATTR_SERCOM_STD), (PIN_ATTR_SERCOM), NO_OTHER}, //SS1-1, SA3-1

  //status-led
  {PORTA, 15, PIO_MULTI, (PER_ATTR_OUTPUT_TYPE_STD), PIN_ATTR_DIGITAL, NO_OTHER},

  //spi
  {PORTB, 22, PIO_MULTI, (PER_ATTR_SERCOM_ALT), (PIN_ATTR_SERCOM), NO_OTHER}, // MOSI
  {PORTA, 23, PIO_MULTI, (PER_ATTR_OUTPUT_TYPE_STD), (PIN_ATTR_DIGITAL), NO_OTHER}, // SS      
  {PORTB, 23, PIO_MULTI, (PER_ATTR_SERCOM_ALT), (PIN_ATTR_SERCOM), NO_OTHER}, // SCK
  {PORTB,  2, PIO_MULTI, (PER_ATTR_SERCOM_ALT), (PIN_ATTR_SERCOM), NO_OTHER}, // MISO

  //serial
  {PORTA, 5, PIO_SERCOM, (PER_ATTR_SERCOM_ALT), (PIN_ATTR_SERCOM), NO_OTHER}, // RX: SERCOM0-1
  {PORTA, 4, PIO_SERCOM, (PER_ATTR_SERCOM_ALT), (PIN_ATTR_SERCOM), NO_OTHER}, // TX: SERCOM0-0

  //supc-vbat
  {PORTB, 03, PIO_MULTI, (PER_ATTR_OUTPUT_TYPE_STD), (PIN_ATTR_DIGITAL | PIN_ATTR_EXTINT | PIN_ATTR_ADC), TIMER_NONE, 0x1D, EINT_3,  GCLK_CCL_NONE},

/******* INTERNAL CONNECTED ****************************************************************************************************************/
/******* RF SPI PINS  */
  {PORTB, 31, PIO_OUTPUT,    (PER_ATTR_OUTPUT_TYPE_STD), (PIN_ATTR_DIGITAL), NO_OTHER}, // SEL 
  {PORTB, 30, PIO_SERCOM_RF, (PER_ATTR_OUTPUT_TYPE_STD), (PIN_ATTR_DIGITAL | PIN_ATTR_SERCOM),  NO_OTHER}, // MOSI SERCOM4 PAD2
  {PORTC, 19, PIO_SERCOM_RF, (PER_ATTR_OUTPUT_TYPE_STD), (PIN_ATTR_DIGITAL | PIN_ATTR_SERCOM),  NO_OTHER}, // MISO SERCOM4 PAD0
  {PORTC, 18, PIO_SERCOM_RF, (PER_ATTR_OUTPUT_TYPE_STD), (PIN_ATTR_DIGITAL | PIN_ATTR_SERCOM),  NO_OTHER}, // SCK  SERCOM4 PAD3
  {PORTB, 15, PIO_OUTPUT,    (PER_ATTR_OUTPUT_TYPE_STD), (PIN_ATTR_DIGITAL), NO_OTHER}, // RST          
  /******* RF DIO PINS */
  {PORTB, 16, PIO_MULTI,     (PER_ATTR_OUTPUT_TYPE_STD), (PIN_ATTR_DIGITAL | PIN_ATTR_EXTINT), TIMER_NONE, ADC_NONE, EINT_0,  GCLK_CCL_NONE}, // DIO0
  {PORTA, 11, PIO_MULTI,     (PER_ATTR_OUTPUT_TYPE_STD), (PIN_ATTR_DIGITAL | PIN_ATTR_EXTINT), TIMER_NONE, ADC_NONE, EINT_11, GCLK_CCL_NONE}, // DIO1
  {PORTA, 12, PIO_MULTI,     (PER_ATTR_OUTPUT_TYPE_STD), (PIN_ATTR_DIGITAL | PIN_ATTR_EXTINT), TIMER_NONE, ADC_NONE, EINT_12, GCLK_CCL_NONE}, // DIO2
  {PORTB, 17, PIO_MULTI,     (PER_ATTR_OUTPUT_TYPE_STD), (PIN_ATTR_DIGITAL | PIN_ATTR_EXTINT), TIMER_NONE, ADC_NONE, EINT_1,  GCLK_CCL_NONE}, // DIO3
  {PORTA, 10, PIO_MULTI,     (PER_ATTR_OUTPUT_TYPE_STD), (PIN_ATTR_DIGITAL | PIN_ATTR_EXTINT), TIMER_NONE, ADC_NONE, EINT_10, GCLK_CCL_NONE}, // DIO4
  {PORTB,  0, PIO_MULTI,     (PER_ATTR_OUTPUT_TYPE_STD), (PIN_ATTR_DIGITAL | PIN_ATTR_EXTINT), TIMER_NONE, ADC_NONE, EINT_0,  GCLK_CCL_NONE}, // DIO5
  /******* RF OTHER */
  {PORTA,  9, PIO_OUTPUT,    (PER_ATTR_OUTPUT_TYPE_STD), (PIN_ATTR_DIGITAL), NO_OTHER}, // TCXO_PWR_PIN
  {PORTA, 13, PIO_OUTPUT,    (PER_ATTR_OUTPUT_TYPE_STD), (PIN_ATTR_DIGITAL), NO_OTHER}, // RF_SWITCH_PIN
};

const void *g_apTCInstances[TCC_INST_NUM + TC_INST_NUM] = {TCC0, TCC1, TCC2, TC3, TC4};

SERCOM sercom0(SERCOM0); // Serial
SERCOM sercom1(SERCOM1); // I2C
SERCOM sercom2(SERCOM2);
SERCOM sercom3(SERCOM3); // Serial1
SERCOM sercom4(SERCOM4); // RESERVED FOR RF
SERCOM sercom5(SERCOM5); // SPI

Uart Serial(&sercom0, PIN_SERIAL_RX, PIN_SERIAL_TX, SERCOM_RX_PAD_1, UART_TX_PAD_0);
extern "C" void SERCOM0_Handler(void)
{
  Serial.IrqHandler();
}

Uart Serial1(&sercom3, 33, 32, SERCOM_RX_PAD_1, UART_TX_PAD_0);
extern "C" void SERCOM3_Handler(void)
{
  Serial1.IrqHandler();
}

extern "C" void RTC_Handler( void )
{
    if (RTC->MODE0.INTFLAG.bit.CMP0) {
        /* clear flag */
        RTC->MODE0.INTFLAG.bit.CMP0 = 1;
    }    
}

/* * */

void X_initVariant()
{
  // Clock SERCOM for Serial, TC/TCC for Pulse and Analog, and ADC/DAC for Analog
  uint32_t regAPBCMASK = MCLK->APBCMASK.reg;

  regAPBCMASK |= MCLK_APBCMASK_SERCOM0 | MCLK_APBCMASK_SERCOM1 | MCLK_APBCMASK_SERCOM2 | MCLK_APBCMASK_SERCOM3 | MCLK_APBCMASK_SERCOM4;

  MCLK->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5 | MCLK_APBDMASK_TC4; // On the SAML, SERCOM5 and TC4 are on the low power bridge
  regAPBCMASK |= MCLK_APBCMASK_TCC0 | MCLK_APBCMASK_TCC1 | MCLK_APBCMASK_TCC2 | MCLK_APBCMASK_TC0 | MCLK_APBCMASK_TC1 | MCLK_APBCMASK_TC2;

  regAPBCMASK |= MCLK_APBCMASK_DAC;
  MCLK->APBDMASK.reg |= MCLK_APBDMASK_ADC; // On the SAML, ADC is on the low power bridge

  MCLK->APBCMASK.reg |= regAPBCMASK;

  // Setup all pins (digital and analog) in STARTUP mode (enable INEN and set default pull direction to pullup (pullup will not be enabled))
  //for (uint32_t ul = 0; ul < NUM_DIGITAL_PINS; ul++) pinMode(ul, PIO_STARTUP);

  //initADC(); // Initialize Analog Controller

  //analogReference(VARIANT_AR_DEFAULT); // Use default reference from variant.h

  //initDAC(); // Initialize DAC
}